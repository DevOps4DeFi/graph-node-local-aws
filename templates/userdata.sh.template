#!/bin/bash
## a userdata script to bring an amazon linux 2 instance up and running as a local graph node with badger subgraph
#
#
## Setup Yarn pkg repos
curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
apt update
apt install -y awscli
export AWS_DEFAULT_REGION=${region} ## REMOVE to detemplatize
apt install -y jq # JSON parser for sh/bash
apt install -y git
apt install -y docker.io
## Install yarn
apt install -y libsecret-1-dev ## needed for graph-cli
apt install -y yarn
ln -s /usr/bin/nodejs /usr/bin/node ## see https://github.com/nodejs/node-v0.x-archive/issues/3911
apt install -y npm
systemctl start docker
systemctl enable docker
## Docker-compose environment vars for graph-node
export NODEURL=`aws ssm get-parameters --name ${graphnode_url_ssm_arn} | jq -r '.Parameters | .[] | .Value'` ## Change to a string with a url to templatize

## Install docker compose
curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

## Setup and install graph-node
mkdir /graph-node ### will run everything from here
cd /graph-node

cd graph-node
cat >> graphnode.env << EOF
postgres_host=${postgres_host}
postgres_user=${postgres_user}
postgres_pass=${postgres_pass}
postgres_db=${postgres_db}
## Docker-compose environment vars for postgres
POSTGRES_USER=${postgres_user}
POSTGRESS_PASSWORD=${postgres_pass}
POSTGRESS_DB=${postgres_db}
EOF
echo "ethereum=bsc:$NODEURL" >> graphnode.env

cat > docker-compose.yml <<EOF
version: '3'
services:
  graph-node:
    image: graphprotocol/graph-node
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - ipfs
      - postgres
    environment:
      ipfs: 'ipfs:5001'
      RUST_LOG: info

    env_file:
     - ./graphnode.env
  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    ports:
      - '5001:5001'
    volumes:
      - ./data/ipfs:/data/ipfs
  postgres:
    image: postgres
    ports:
      - '5432:5432'
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    env_file:
      - ./graphnode.env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
EOF

/usr/local/bin/docker-compose up -d
### This system should now be running as a graph node
### Now we need to install some graphs



## install subgraphs ## TODO figure out how to deal with private repos
cd /graph-node
mkdir -p subgraphs/
#cd subgraphs
#for url in $${github_graph_urls} ##todo remove $$ from {} on uncomment
#do
#git clone $url
## get everything after the last / in the url to get the directory name and remove the trailing .git if it's there
#clean_url=`echo $url | sed s/\.git$//`
#dirname=$${clean_url##*/} #note $${} simpy escapes terraform interpolation and resolves the same without the second $
#GRAPH_PATH=`echo $clean_url | sed s#.*://[^/]*/##` ##drop the http://..../ in the url to leave us with Project/Repo
### fighting with yarn
#cd $dirname
#yarn
#yarn codegen
#yarn create-local $dirname
#yarn deploy-local $dirname
#cd ../
#done

